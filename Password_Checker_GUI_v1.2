import tkinter as tk
from tkinter import messagebox
import re

#Joshua Adkins 10/13/24



# List of common weak passwords to avoid
common_passwords = [
    "123456", "password", "123456789", "12345678", "12345", "111111", "1234567",
    "sunshine", "qwerty", "iloveyou", "princess", "admin", "welcome", "football",
    "monkey", "letmein", "abc123", "dragon", "password1", "123123", "qwertyuiop",
    "mynoob", "666666", "123321", "google", "1q2w3e4r5t", "123qwe", "zxcvbnm", 
    "000000", "qwerty123", "654321", "123abc", "987654321", "shadow", "11111",
    "admin", "123", "Aa123456", "1234567890", "12345678910", "admin123", "1111",
    "P@ssw0rd", "root", "Pass@123", "112233", "102030", "ubnt", "Aa@123456", 
    "abcd1234", "1q2w3e4r", "87654321", "Eliska81", "123123123", "11223344", 
    "0987654321", "demo", "12341234", "Admin@123", "1q2w3e4r5t", "11111111",
    "pass", "Demo@123", "azerty", "admintelecom", "Admin", "123meklozed",
    "0123456789", "121212", "1234qwer", "admin@123", "1qaz2wsx", "123456789a", 
    "Aa112233", "asdfghjkl", "888888", "admin1", "Aa123456@", "asd123", "202020", 
    "asdf1234", "Abcd@1234", "12344321", "aa123456", "1122334455", "Abcd1234", 
    "guest", "88888888", "Admin123", "secret", "1122", "admin1234", "administrator",
    "Password@123", "q1w2e3r4", "10203040", "a123456", "12345678a", "555555", 
    "zxcvbnm", "Abcd@123", "Welcome@123", "minecraft", "101010", "Pass@1234", 
    "123654", "123456a", "India@123", "Ar123455", "159357", "54321", "1029384756", 
    "1234567891", "vodafone", "Cindylee1", "1111111111", "azertyuiop", "999999", 
    "adminHW", "10203", "gvt12345", "12121212", "12345678901", "7777777", 
    "12345678900", "Kumar@123", "147258", "qwerty12345", "abc12345", "bismillah",
    "Heslo1234", "a123456789", "Passw0rd", "aaaaaa", "12qwaszx", "password123", 
    "123mudar", "123456aA@", "868689849", "motorola", "1234512345", "1q2w3e", 
    "a1b2c3d4", "admin123456", "Qwerty123", "test123", "Password123", "Aa195043", 
    "Test@123", "111111111", "admin12345", "zaq12wsx", "adminadmin", "ADMIN", 
    "1234abcd", "qwerty1234", "theworldinyourhand", "123456a@", "Aa102030", 
    "987654", "p@ssw0rd", "Abc@1234", "131313", "1a2b3c4d", "changeme", "12345679", 
    "student", "senha123", "1234567a", "user1234", "abc123456", "master", 
    "12345qwert", "1234561", "adminisp", "azerty123", "pakistan", "aaaaaaaa", 
    "P@55w0rd", "P@$$w0rd", "qwerty123456", "55555", "lol12345", "Aa123456789", 
    "999999999", "786786", "asdasd123", "test1234", "samsung"
]

# Function to check for sequential characters (e.g., "abc", "123")
def is_sequential(password):
    for i in range(len(password) - 2):
        if ord(password[i+1]) == ord(password[i]) + 1 and ord(password[i+2]) == ord(password[i]) + 2:
            return True
    return False

# Function to check for repeated characters (e.g., "aaaaaa")
def has_repeated_characters(password):
    return any(password.count(char) > 3 for char in set(password))

def check_password_strength(password):
    strength = {
        "length": len(password) >= 12,  # Increased minimum length
        "uppercase": bool(re.search(r'[A-Z]', password)),
        "lowercase": bool(re.search(r'[a-z]', password)),
        "numbers": bool(re.search(r'[0-9]', password)),
        "symbols": bool(re.search(r'[@$!%*#?&]', password)),
        "not_common": password.lower() not in common_passwords,
        "not_sequential": not is_sequential(password),
        "no_repeats": not has_repeated_characters(password)
    }

    score = sum(strength.values())

    if score == 8:
        return "Very Strong password!"
    elif 6 <= score < 8:
        return "Strong password!"
    elif 4 <= score < 6:
        return "Moderate password. Try adding more variety."
    else:
        return "Weak password. Consider making it longer and more complex."

def suggest_improvements(password):
    suggestions = []
    if len(password) < 12:
        suggestions.append("Increase the length to at least 12 characters.")
    if not re.search(r'[A-Z]', password):
        suggestions.append("Add at least one uppercase letter.")
    if not re.search(r'[a-z]', password):
        suggestions.append("Add at least one lowercase letter.")
    if not re.search(r'[0-9]', password):
        suggestions.append("Include at least one number.")
    if not re.search(r'[@$!%*#?&]', password):
        suggestions.append("Add at least one special character (e.g., @, $, !, %, etc.).")
    if password.lower() in common_passwords:
        suggestions.append("Avoid using common passwords.")
    if is_sequential(password):
        suggestions.append("Avoid sequential characters (e.g., 'abc', '123').")
    if has_repeated_characters(password):
        suggestions.append("Avoid using the same character repeatedly.")

    return suggestions

# Function to be called when the 'Check Password' button is clicked
def check_password():
    password = password_entry.get()

    if not password:
        messagebox.showwarning("Input Error", "Please enter a password.")
        return

    # Check password strength
    result = check_password_strength(password)
    result_label.config(text=result)

    # Provide suggestions if needed
    improvements = suggest_improvements(password)
    if improvements:
        suggestions_label.config(text="\n".join(improvements))
    else:
        suggestions_label.config(text="")

# Create the main window
root = tk.Tk()
root.title("Password Strength Checker")

# Create a label and entry widget for password input
password_label = tk.Label(root, text="Enter your password:")
password_label.pack(pady=5)
password_entry = tk.Entry(root, show="*", width=30)
password_entry.pack(pady=5)

# Create a button to check password strength
check_button = tk.Button(root, text="Check Password", command=check_password)
check_button.pack(pady=10)

# Label to display the result of password strength
result_label = tk.Label(root, text="", fg="blue")
result_label.pack(pady=5)

# Label to display suggestions for improvement
suggestions_label = tk.Label(root, text="", fg="red", justify="left")
suggestions_label.pack(pady=5)

# Start the main event loop
root.mainloop()
